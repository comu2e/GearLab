<?php

namespace Tests\Feature\Controllers;

use App\Http\Controllers\FollowUserController;
use App\Models\FollowUser;
use App\Models\User;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class FollowUserControllerTest extends TestCase
{
    use DatabaseTransactions;

//    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        for ($i = 0; $i < 100; $i++) {
            User::factory()->create();
        }
        $this->auth_user = User::first();


    }

    /**
     *
     * $@test index
     */
    public function testIndex()
    {

        $response = $this->actingAs($this->auth_user)
            ->json('get', route('follows.follow.index', [
                'user' => 2,
            ]));
        $response->assertStatus(200)
            ->assertJsonMissing([
                'user_id' => $this->auth_user->id,
            ]);

    }

    /**
     * A basic feature test store.
     *
     * @test follow
     */
    public function testFollow()
    {

        $response = $this->actingAs($this->auth_user)
            ->json('post', route('follows.follows.store', [
                'user' => 2,
            ]));
        $response->assertStatus(201)
            ->assertJsonFragment([
                'user_id' => $this->auth_user->id,
            ])
        ;
        $this->markTestIncomplete(
            'このテストは、まだ実装されていません。'
        );

    }
    /**
     *
     * $@test index
     * @depends testFollow
     */
    public function testIsFollowed()
    {

        $response = $this->actingAs($this->auth_user)
            ->json('get', route('follows.follow.check', [
                'user' => 2,
            ]));
        $response->assertStatus(200);
        $this ->assertEquals(0,$response->content());
    }
}
