<?php

namespace Tests\Feature\Controllers;

use App\Models\Gear;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;
use function PHPUnit\Framework\assertSame;
use Illuminate\Foundation\Testing\DatabaseTransactions;

class GearApiControllerTest extends TestCase
{
    use DatabaseTransactions;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub


        for ($i = 0; $i < 100; $i++) {
            Gear::factory()->create();
        }
    }

    /**
     * A basic feature test example.
     *
     * @test index
     */
    public function APIでGear一覧を取得する()
    {
//        連結テスト

        //データは100であること確認
        $this->assertEquals(100, Gear::all()->count());

        //データの準備
        $gear1 = Gear::factory()->create();
        $gear2 = Gear::factory()->create();
        //データのpost
        $this->post('api/gears', $data = [$gear1, $gear2]);
        //データ取得
        $gear = Gear::all();
        $this->get('api/gears')->assertOk();
        //データプラスされていることを検証
        $this->assertEquals(102, Gear::all()->count());

    }

    /**
     * A basic feature test example.
     *
     * @test post
     */
    public function APIでGearを登録する()
    {
        //データ保存する準備
        $gear1 = Gear::factory()->create();
        $gear2 = Gear::factory()->create();

        $this->post('api/gears', $data = [$gear1, $gear2]);
        //検証
        $this->assertEquals(102, Gear::all()->count());

    }

    /**
     * A basic feature test example.
     *
     * @test delete
     */
    public function APIでGearを削除する()
    {
        $range = 100;

        for ($i = 1; $i < $range+1; $i++) {
            //データ保存する準備
            $gear = Gear::find($i);
            $path ='/api/gears/'.$i;
            $this->delete($path, $data = [$gear]);
            //検証
            $this->assertEquals($range-1, Gear::all()->count());
            $range -= 1;

        }

    }
}
